Here’s how you can set up a **CI/CD pipeline for a React app** using **Jenkins** to automate pushing the image to **Docker Hub**, and then deploying it to a **Kubernetes cluster**. This pipeline will be quite similar to the Node.js setup but tailored for React.

---

### **Step-by-Step Guide:**

### 1. **React App Dockerfile**

In your React app repository on GitHub, add a `Dockerfile` to containerize the app:

```Dockerfile
# Step 1: Build the React app
FROM node:14 AS build

WORKDIR /app

COPY package*.json ./
RUN npm install

COPY . .
RUN npm run build

# Step 2: Serve the app using Nginx
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

---

### 2. **Jenkinsfile for React App**

In the root of your GitHub repo, add a `Jenkinsfile` that defines the CI/CD pipeline. This Jenkinsfile will:
- Clone the repository.
- Build the Docker image for the React app.
- Push the image to Docker Hub.
- Deploy the app to a Kubernetes cluster.

Here's a sample `Jenkinsfile`:

```groovy
pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = 'your-dockerhub-username/react-app'
        KUBERNETES_DEPLOY_PATH = 'kubernetes/'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/your-username/your-react-app-repo.git'
            }
        }

        stage('Build React App Docker Image') {
            steps {
                script {
                    def image = docker.build("${DOCKER_HUB_REPO}:${env.BUILD_ID}")
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        def image = docker.image("${DOCKER_HUB_REPO}:${env.BUILD_ID}")
                        image.push()
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "kubectl apply -f ${KUBERNETES_DEPLOY_PATH}/deployment.yaml"
                    sh "kubectl apply -f ${KUBERNETES_DEPLOY_PATH}/service.yaml"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
```

---

### 3. **Kubernetes Deployment and Service Files**

In your GitHub repo, create a `kubernetes/` folder, and add `deployment.yaml` and `service.yaml` files.

- **`deployment.yaml`** (React app deployment):
  ```yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: react-app-deployment
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: react-app
    template:
      metadata:
        labels:
          app: react-app
      spec:
        containers:
        - name: react-app
          image: your-dockerhub-username/react-app:latest
          ports:
          - containerPort: 80
  ```

- **`service.yaml`** (React app service):
  ```yaml
  apiVersion: v1
  kind: Service
  metadata:
    name: react-app-service
  spec:
    selector:
      app: react-app
    ports:
      - protocol: TCP
        port: 80
        targetPort: 80
    type: LoadBalancer
  ```

---

### 4. **Set Up Jenkins for Docker and Kubernetes**

Make sure your Jenkins is configured to use Docker and Kubernetes.

- **Install Jenkins Plugins**:
  - Docker Pipeline
  - Kubernetes Plugin
  - Git Plugin
  
- **Set Up Docker Credentials**:
  - Go to Jenkins > Manage Jenkins > Credentials > Global > Add Credentials.
  - Add your **Docker Hub** credentials (`dockerhub-credentials`).

---

### 5. **Jenkins Pipeline Configuration**

- **Create a Jenkins Job**:
  1. Go to Jenkins > New Item > Pipeline.
  2. Name your job (e.g., `ReactApp-Pipeline`).
  3. In the **Pipeline definition**, select **Pipeline script from SCM**.
  4. Enter your GitHub repository URL.
  5. Set the path to the `Jenkinsfile` (default is `Jenkinsfile` in the root directory).

---

### 6. **Automating Kubernetes Deployment via Jenkins**

In the Jenkins pipeline, after the Docker image is pushed to Docker Hub, Jenkins will automatically trigger a Kubernetes deployment. The commands:

```groovy
sh "kubectl apply -f kubernetes/deployment.yaml"
sh "kubectl apply -f kubernetes/service.yaml"
```

will apply your Kubernetes YAML files.

---

### 7. **Create a Kubernetes Cluster on EC2**

Follow these steps to create a Kubernetes cluster:

- **Install kubectl**:
  ```bash
  curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
  chmod +x ./kubectl
  sudo mv ./kubectl /usr/local/bin/kubectl
  ```

- **Install minikube** (Optional if you want a local Kubernetes cluster):
  ```bash
  curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
  chmod +x minikube
  sudo mv minikube /usr/local/bin/
  minikube start --driver=docker
  ```

- **Deploy React App**:
  Once the Jenkins pipeline is run and Docker Hub has the new image, the app will be deployed to the Kubernetes cluster.

---

### 8. **Run the Jenkins Pipeline**

1. Trigger the pipeline manually in Jenkins or set up a **GitHub webhook** to trigger the build automatically on push.
2. The pipeline will:
   - Clone the React app from GitHub.
   - Build the Docker image for the React app.
   - Push the Docker image to Docker Hub.
   - Deploy the new image to Kubernetes.

---

### 9. **Accessing the React App**

Once deployed, you can access the React app via the Kubernetes service’s LoadBalancer IP.

If you’re using **minikube**, you can access the service with:
```bash
minikube service react-app-service
```

---

This setup will allow you to automate the entire CI/CD process for your React app, from building the Docker image to deploying it on a Kubernetes cluster. Let me know if you need help with any specific part!